<?php
/**
 * @file
 * Obiba Agate file
 */

/**
 * Implements hook_menu().
 */
function obiba_agate_menu() {
  $items = array();
  $items['admin/config/obiba-agate'] = array(
    'title' => t('OBiBa Agate'),
    'description' => t('Configure Agate'),
    'weight' => -99,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'position' => 'right',
  );

  $items['admin/config/obiba-agate/agate-settings'] = array(
    'title' => 'Settings',
    'description' => 'Configure OBiBa central authentication services',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('obiba_agate_admin_settings'),
    'access arguments' => array('administer obiba agate'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'obiba_agate.admin.inc',
    'weight' => 0,
  );

  $items['admin/config/obiba-agate/agate-pages'] = array(
    'title' => 'Pages settings',
    'description' => 'Configure Agate pages content',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('obiba_agate_admin_pages_settings'),
    'access arguments' => array('administer obiba agate'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'obiba_agate_pages.admin.inc',
    'weight' => 1,
  );

  $items['agate/confirm'] = array(
    'title' => 'Password form reset/confirmation',
    'description' => 'Password form reset/confirmation',
    'page callback' => 'obiba_agate_password_form_process',
    'access callback' => TRUE,
    'file' => 'obiba_agate.confirmation.inc'
  );
  $items['agate/reset_password'] = array(
    'title' => 'Password form reset',
    'description' => 'Password form reset',
    'page callback' => 'obiba_agate_password_form_process',
    'access callback' => TRUE,
    'file' => 'obiba_agate.confirmation.inc',
  );

  $items[MicaClientPathProvider::AGATE_PROFILE] = array(
    'access callback' => TRUE,
    'title' => 'User Profile',
    'description' => 'User Profile',
    'page callback' => 'obiba_agate_angular_profile_page',
  );
  $items[MicaClientPathProvider::AGATE_REGISTER] = array(
    'access callback' => TRUE,
    'title' => 'Register User',
    'description' => 'Register User',
    'page callback' => 'obiba_agate_angular_register_page',
  );

  $items['agate/send_password/%'] = array(
    'title' => 'Send reset/confirmation password',
    'description' => 'Send the reset/confirmation registration Agate User',
    'page callback' => 'obiba_agate_send_password_user',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'file' => 'obiba_agate.confirmation.inc',
  );

  $items['agate/agate_user_join/ws'] = array(
    'title' => 'Agate User',
    'description' => 'Agate User Profile',
    'page callback' => 'obiba_agate_register_user',
    'access callback' => TRUE,
    'file' => 'obiba_agate_services.inc'
  );
  $items['agate/agate-form/ws'] = array(
    'page callback' => 'obiba_agate_schema_form',
    'access callback' => TRUE,
    'file' => 'obiba_agate_services.inc'
  );
  $items['agate/agate-user-profile/ws'] = array(
    'page callback' => 'obiba_agate_user_profile',
    'access callback' => TRUE,
    'file' => 'obiba_agate_services.inc'
  );
  $items['agate/agate-user-update-password/%/ws'] = array(
    'page callback' => 'obiba_agate_user_profile_update_password',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'file' => 'obiba_agate_services.inc'
  );

  return $items;
}

function obiba_agate_angular_register_page() {
  $app_block = obiba_main_app_angular_load_template_app();
  drupal_set_title(variable_get_value('obiba_register_page_title'));
  return theme('obiba_agate_user-main-app', array('main_app' => $app_block));
}

function obiba_agate_angular_profile_page() {
  Global $user;
  $app_block = obiba_main_app_angular_load_template_app();
  //@ToDo mya be add the user profile name here to set the title of the page
  drupal_set_title('Profile - ' . $user->name);
  return theme('obiba_agate_user-main-app', array('main_app' => $app_block));
}

/*
 * Get drupal  user profile form
 * */
function gobiba_agate_get_drupal_profile_form() {
  module_load_include('inc', 'user', 'user.pages');
  global $user;
  $form_user = drupal_get_form('user_profile_form', $user);
  $output = drupal_render($form_user);
  return $output;
}

/**
 * Main angular app
 * Implementation of hook_get_ng_module_to_load()
 */

function obiba_agate_get_ng_module_to_load() {
  if (in_array(current_path(), array(MicaClientPathProvider::AGATE_PROFILE))) {
    return 'mica.agateProfile';
  }
  if (current_path() == MicaClientPathProvider::AGATE_REGISTER) {
    return 'mica.agateRegister';
  }
  return FALSE;
}

/**
 * Main angular app
 * Implements hook_get_js()
 */
function obiba_agate_get_js() {
  global $user;
  $js = array();
  $module_path = drupal_get_path('module', 'obiba_agate');
//  if (in_array(current_path(), array('agate/test_agate_angular',MicaClientPathProvider::AGATE_REGISTER,MicaClientPathProvider::AGATE_PROFILE))) {
  if (current_path() == MicaClientPathProvider::AGATE_REGISTER) {
    $js = file_scan_directory($module_path . '/js/app/agate_register', '/.*\.js$/', array('key' => 'name'));
    ksort($js);
  }
  if (in_array(current_path(), array(MicaClientPathProvider::AGATE_PROFILE))) {
    $js = file_scan_directory($module_path . '/js/app/agate_profile', '/.*\.js$/', array('key' => 'name'));
    ksort($js);
  }

  foreach ($js as $file_js) {
    drupal_add_js($file_js->uri, array(
      'type' => 'file',
      'scope' => 'footer'
    ));
  }
  $js_params = array(
    'agateParam' => array(
      'userId' => !empty($user->name) ? $user->name : NULL
    )
  );
  drupal_add_js($js_params, 'setting');
}

/**
 * Implements hook_theme().
 */
function obiba_agate_theme($existing, $type, $theme, $path) {
  $path_views_theme = $path . '/js/app/views';
  $path_theme = $path . '/templates';
  return array(
    'obiba_agate-user-profile-register-form' => array(
      'template' => 'obiba_agate-user-profile-register-form',
      'path' => $path_views_theme
    ),
    'obiba_agate-user-profile-view' => array(
      'template' => 'obiba_agate-user-profile-view',
      'path' => $path_views_theme
    ),
    'obiba_agate-user-profile-form' => array(
      'template' => 'obiba_agate-user-profile-form',
      'path' => $path_views_theme
    ),
    'obiba-agate-user-update-password-modal' => array(
      'template' => 'obiba-agate-user-update-password-modal',
      'path' => $path_views_theme
    ),
    'obiba_agate_user-pass-request-form' => array(
      'template' => 'obiba_agate_user-pass-request-form',
      'path' => $path_theme
    ),
    'obiba_agate_user-form-password-confirm' => array(
      'template' => 'obiba_agate_user-form-password-confirm',
      'path' => $path_theme
    ),
    'obiba_agate_user-form-password-reset' => array(
      'template' => 'obiba_agate_user-form-password-reset',
      'path' => $path_theme
    ),
    'obiba_agate_user-main-app' => array(
      'template' => 'obiba_agate_user-main-app',
      'path' => $path_theme
    )
  );
}

/**
 * Implements hook_library().
 */
function obiba_agate_library() {
  return obiba_main_app_angular_load_angular_library();
}

/**
 * Implements hook_library_alter().
 * Angular library compatible with Jquery 1.10
 *
 */
function obiba_agate_library_alter(&$javascript, $module) {
  if (in_array(current_path(), array(
    MicaClientPathProvider::AGATE_REGISTER,
    MicaClientPathProvider::AGATE_PROFILE
  ))) {
    $path = drupal_get_path('module', 'jquery_update');
    jquery_update_jquery_replace($javascript, NULL, $path, NULL, '1.10');
  }
}

/*
 * parse and return an formatted error message
 *
 * */
function  obiba_agate_register_user_response_error($code_error, $message_error, $form_attributes = NULL) {
  drupal_add_http_header('Status', $code_error);
  $response['errorMessage'] = $message_error;
  $response['updatedField']['form'] = !empty($form_attributes) ? $form_attributes['form'] : NULL;
  $response['updatedField']['schema'] = !empty($form_attributes) ? $form_attributes['schema'] : NULL;
  drupal_json_output($response);
  die;
}

/*
 * Get schema form attribute
 **/
function obiba_agate_schema_form() {
  $agate_client = new AgateClient();
  $form = $agate_client->get_config_form_join();
  $form_attributes = array(
    'form' => $form['definition'],
    'schema' => $form['schema'],
    'captchaConfig' => $agate_client->get_recaptcha_key_config_form_join()
  );
  drupal_json_output($form_attributes);
}

/*
 * Get the join form parameters from Agate server
 * @return : formatted Json parameter form
 *
 * */
function obiba_agate_get_agate_recaptch_key() {
  $agate_client = new AgateClient();

  return $agate_client->get_recaptcha_key_config_form_join();
}

function obiba_agate_user_pass_validate($form, &$form_state) {
  $name_email = $form_state['values']['name'];
  if ((!isset($form_state['uid']) || $form_state['uid'] == FALSE) && !empty($name_email)) {
    obiba_agate_send_password_request(array('username' => $name_email));
  }
}

function obiba_agate_send_password_request($name_email) {
  $agate_client = new AgateClient();
  $response = $agate_client->password_request($name_email);
  if (!empty($response['code']) && $response['code'] == 200) {
    drupal_set_message(t('Check your email to complete your login recovery.'), 'status');

  }
  else {
    if (!empty($response['codeError'])) {
      $message_serv_array = json_decode($response['message']);
      drupal_set_message(t('Password request error, server respond with: ') . $message_serv_array->message, 'error');
    }

  }
}

/**
 * Implements hook_form_user_register_form_alter().
 */
function obiba_agate_form_agate_register_form_alter(&$form, &$form_state, $form_id) {
  $form['obiba_agate']['#value'] = 'obiba_agate_user_register_form';
}

/**
 * Implements hook_form_user_pass_alter().
 */
function obiba_agate_form_user_pass_alter(&$form, $form_state) {
  $form['obiba_agate']['#value'] = 'obiba_agate_user_register_form';
  $form['actions']['submit']['#value'] = t(variable_get_value('obiba_reset_password_button_caption'));
  $form['#validate'] = array(
    'user_pass_validate',
    'obiba_agate_user_pass_validate'
  );
}

/**
 * Implementation of hook_form_alter().
 * Change the normal form login form behaviour.
 */
function obiba_agate_form_user_login_alter(&$form, $form_state) {
  unset($form['links']);
  drupal_set_title(t(variable_get_value('obiba_login_page_title')));
  $enable_form_tooltips = variable_get_value('enable_form_tooltips');
  if (empty($enable_form_tooltips)) {
    unset($form['name']['#description']);
    unset($form['pass']['#description']);
  }
  $form['obiba_agate']['#value'] = 'obiba_agate_user_register_form';
  $form['name']['#title'] = t(variable_get_value('obiba_login_username_label'));
  $form['actions']['submit']['#value'] = t(variable_get_value('obiba_login_button_caption'));
  $form['actions']['submit']['#attributes']['class'][] = 'btn btn-primary';

  $form['#validate'] = array(
    'obiba_agate_mail_user_login_validate',
    'user_login_name_validate',
    'user_login_authenticate_validate',
    'obiba_agate_login_validate',
    'user_login_final_validate'
  );

  $parameters = drupal_get_query_parameters();
  $form['#action'] = url($_GET['q'], array(
    'query' =>
      array(
        'destination' => !empty($parameters['destination']) ?
          $parameters['destination'] : (strstr(current_path(), 'user') ? base_path() : current_path())
      )
  ));
}

/**
 * Custom validation for user login form
 *
 */
function obiba_agate_mail_user_login_validate($form, &$form_state) {
  if (isset($form_state['values']['name']) && $form_state['values']['name']) {
    if ($name = db_query("SELECT name FROM {users} WHERE LOWER(mail) = LOWER(:name)", array(
      ':name' => $form_state['values']['name'],
    ))->fetchField()
    ) {
      form_set_value($form['name'], $name, $form_state);
    }
  }
}

/**
 * Implement hook_user_profile_form_alter() to disable the ability to change
 * email address and password for externally authenticated users.
 */
function obiba_agate_form_user_profile_form_alter(&$form, $form_state) {
  $account = $form['#user'];
  $authmaps = user_get_authmaps($account->name);
  if (is_array($authmaps) && array_key_exists('obiba_agate', $authmaps)) {
    $form['account']['name']['#type'] = 'hidden';
    $form['account']['mail']['#type'] = 'hidden';
    $form['account']['current_pass']['#type'] = 'hidden';
    $form['account']['pass']['#type'] = 'hidden';
//    if ($account->name == $user->name) {
//      unset($form['block']);
//      unset($form['picture']);
//      unset($form['actions']);
//    }
    $form['agate'] = array(
      '#type' => 'fieldset',
      '#title' => t('Password'),
      '#description' => t('You can request for your password to be reset.') . '<br/><br/>'
        . l('Reset password', 'user/password', array('attributes' => array('class' => 'btn btn-default')))
    );
  }
  $form['#submit'][] = 'obiba_agate_user_profile_form_submit';
  return $form;

}

function obiba_agate_user_profile_form_submit($form, &$form_state) {
  if (isset($_GET['destination'])) {
    unset($_GET['destination']);
  }
  $form_state['redirect'] = array(
    MicaClientPathProvider::AGATE_PROFILE,
    array('fragment' => 'view')
  );
}

/**
 * Implements hook_permission().
 */
function obiba_agate_permission() {
  return array(
    'administer obiba agate' => array(
      'title' => t('Administer OBiBa Agate'),
      'description' => t('Configure OBiBa Agate server and other settings.'),
      'restrict access' => TRUE,
    )
  );
}

/**
 * Implements hook_user_logout().
 */
function obiba_agate_user_logout() {
  if (!AgateClient::hasTicket()) {
    return;
  }
  $agate_client = new AgateClient();
  $agate_client->logout();
}

/**
 * Implementation of hook_form_alter().
 * Change the normal form login block form behaviour.
 */
function obiba_agate_form_user_login_block_alter(&$form, $form_state) {
  return obiba_agate_form_user_login_alter($form, $form_state);
}

function obiba_agate_get_from_attribute($attribute, $user_info) {
  foreach ($user_info['attributes'] as $Value_attribute) {
    if ($attribute == $Value_attribute['key']) {
      return $Value_attribute['value'];
    }
  }
  return FALSE;
}

/*
 * Add the new users in drupal in login or register process
 *
 */
function obiba_agate_save_drupal_new_user() {
  $client = new AgateClient();
  $user_info = $client->getSubject();
  $username = $user_info['username'];
  $mail = obiba_agate_get_from_attribute('email', $user_info);
  $username = valid_email_address($username) ? '' : $username;
  //always update/create an  registered drupal user with agate user info
  $user_edit = array(
    'name' => $username,
    'mail' => $mail,
    'pass' => user_password(),
    'init' => $username,
    'status' => 1,
    'access' => REQUEST_TIME
  );

  $account = user_external_load($username);
  if ($account) {
    $roles = $account->roles;
    //$user_edit_object = (object) array('uid' => $account->uid);
    $roles_to_add = obiba_agate_role_update($user_info['groups'], $roles, NULL);
    $user_edit['roles'] = $roles_to_add;
  }
  if (empty($account)) {
    $user_edit_object = drupal_anonymous_user();
    // apply additional role
    $auto_roles = variable_get('obiba_auto_assigned_role', array('mica-user'));
    $user_edit['roles'] = obiba_agate_role_update($user_info['groups'], NULL, $auto_roles);;
    $account = user_save($user_edit_object, $user_edit);
    user_set_authmaps($account, array("authname_" . "obiba_agate" => $username));
  }

  return $account;
}

/**
 * Update roles of the user
 *
 * @param null $user_groups
 * @param $current_roles
 *
 * @return array roles
 */
function obiba_agate_role_update($user_groups = NULL, $current_roles = NULL, $auto_roles = NULL) {
  $roles_to_add = array();
  $db_roles = user_roles();
  if (!empty($auto_roles)) {
    foreach ($db_roles as $rid => $role) {
      if (!empty($auto_roles[$rid])) {
        $current_roles[$rid] = $auto_roles[$rid];
      }
    }

  }
  //affect roles from db_roles
  if (!empty($user_groups)) {
    foreach ($user_groups as $group) {
      foreach ($db_roles as $rid => $role) {
        if (strcmp($group, $role) == 0) {
          $roles_to_add[$rid] = $role;
        }
      }

      //update current roles
      if (!empty($user_roles)) {
        foreach ($current_roles as $rid => $current_role) {
          if (strstr($current_role, 'mica')) {
            if (strcmp($group, $current_role) == 0) {
              $roles_to_add[$rid] = $current_role;
            }

          }
          //don't modify non agate roles
          else {
            $roles_to_add[$rid] = $current_role;
          }
        }
      }
    }
    //create new roles from Agate user
    $roles_to_create = array_diff($user_groups, $db_roles);

    if (!empty($roles_to_create)) {
      foreach ($roles_to_create as $role_to_create) {
        $new_role = new stdClass();
        $new_role->name = $role_to_create;
        user_role_save($new_role);
        $role = user_role_load_by_name($role_to_create);
        $roles_to_add[$role->rid] = $role_to_create;
      }

    }
  }
  return $roles_to_add;
}

/**
 * The obiba_agate_auth() function attempts to authenticate a user off the
 * external system using their e-mail address.
 */
function obiba_agate_login_validate($form, &$form_state) {
  $username = $form_state['values']['name'];
  $password = $form_state['values']['pass'];
  // try to authenticate on Agate if not already authenticated
  if ((!isset($form_state['uid']) || $form_state['uid'] == FALSE) && !empty($username) && !empty($password)) {
    if (obiba_agate_check_user($username, $password)) {
      $account = obiba_agate_save_drupal_new_user($form_state);
      $form_state['uid'] = $account->uid;
    }
  }
  // else drop through to the end and return nothing - Drupal will handle the rejection for us
}

function obiba_agate_check_user($username, $password) {
  try {
    $agate_client = new AgateClient();
    // authenticate
    return $agate_client->authenticate($username, $password);
  }
  catch (Exception $e) {
    watchdog('obiba_agate', 'Error %error_message.', array('%error_message' => $e->faultstring), WATCHDOG_NOTICE);
    return FALSE;
  }
}

/**
 * Merge the roles from Agate to the roles found in drupal and set some
 * attributes.
 *
 * @param $account
 */
function obiba_agate_apply_subject($account) {
  $roles = $account->roles;
  $edit = array();
  $db_roles = user_roles();

  // authorize = apply groups
  $agate_client = new AgateClient();
  $subject = $agate_client->getSubject();
  if (isset($subject['groups'])) {
    // find the role id corresponding to the group name (if any)
    foreach ($subject['groups'] as $group) {
      foreach ($db_roles as $rid => $role) {
        if (strcmp($group, $role) == 0 && !isset($roles[$rid])) {
          $roles[$rid] = $role;
          $edit['roles'] = $roles;
        }
      }
    }
  }

  $edit['mail'] = obiba_agate_get_from_attribute('email', $subject);
  // apply additional role
  $auto_roles = variable_get('obiba_auto_assigned_role', array('mica-user'));
  $edit['roles'] = obiba_agate_role_update($subject['groups'], NULL, $auto_roles);
  if (count($edit) > 0) {
    user_save($account, $edit);
    //Reset the authmaps tab
    obiba_agate_unset_authmaps($subject['username']);
    //Set the new authmaps entries for this user
    user_set_authmaps($account, array("authname_" . "obiba_agate" => $subject['username']));
  }
}

/**
 * Reset the authmap tab
 *
 * @param $user_name
 */
function obiba_agate_unset_authmaps($user_name) {
  db_delete('authmap')
    ->condition('authname', $user_name)
    ->condition('module', 'obiba_agate')
    ->execute();
}
