<?php
/**
 * @file
 * Obiba Auth file
 */

/**
 * Implements hook_menu().
 */
function obiba_auth_menu() {
	global $user;
	$items = array();
	//cas_login_check();
	$items['admin/config/people/obiba'] = array(
		'title' => 'OBiBa Auth settings',
		'description' => 'Configure OBiBa central authentication services',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('obiba_auth_admin_settings'),
		'access arguments' => array('administer obiba'),
		'type' => MENU_NORMAL_ITEM,
		'file' => 'obiba_auth.admin.inc',
	);
	$items['obiba_user/register'] = array(
		'title' => 'Register Agate User',
		'description' => 'Register Agate User Profile',
		'page callback' => 'obiba_auth_register_form_user',
		'access callback' => TRUE,
	);
	$items['agate_user_join'] = array(
		'title' => 'Agate User',
		'description' => 'Agate User Profile',
		'page callback' => 'obiba_auth_register_user',
		'access callback' => TRUE
	);
	return $items;
}

/**
 * Implements hook_theme().
 */
function obiba_auth_theme($existing, $type, $theme, $path) {
	$path_theme = $path . '/templates';
	return array(
		'obiba_auth_user-register-form' => array('template' => 'obiba_auth_user-register-form', 'path' => $path_theme),
		'obiba_auth_user-pass-request-form' => array(
			'template' => 'obiba_auth_user-pass-request-form',
			'path' => $path_theme
		),
	);
}

/*
 * parse and return an formatted error message
 *
 * */
function  obiba_auth_register_user_response_error($code_error, $message_error, $form_attributes = NULL) {
	drupal_add_http_header('Status', $code_error);
	$response['errorMessage'] = $message_error;
	$response['updatedField']['form'] = !empty($form_attributes) ? $form_attributes['form'] : NULL;
	$response['updatedField']['schema'] = !empty($form_attributes) ? $form_attributes['schema'] : NULL;
	drupal_json_output($response);
	die;
}

/*
 * Register action (Ajax resource)
 *
 * */
function obiba_auth_register_user() {

	$form_attributes = obiba_auth_get_agate_form_attributes();

	//Secure the request by verify if the set of POST parameters are trusted by server
	$response_captcha = $_POST['reCaptchaResponse'];
	unset($_POST['reCaptchaResponse']);
	$post_attributes = array_keys($_POST);
	if ($form_attributes['form'] != $post_attributes) {
		obiba_auth_register_user_response_error('400 Bad Request', '{"message" : "Unexpected Error"}', $form_attributes);
	}

	//perform the register request
	$_POST['reCaptchaResponse'] = $response_captcha;
	$agat = new AgateClient();
	$response = $agat->add_agate_user($_POST);
	if (!empty($response['code']) && $response['code'] == 200) {
		drupal_json_output($response);
	}
	else {
		if (!empty($response['codeError'])) {
			$message_serv_array = json_decode($response['message']);
			obiba_auth_register_user_response_error($response['codeError'],
				json_encode(array("message" => $message_serv_array->message)),
				$form_attributes);
		}
	}

}

/*
 * Display the form page
 * */
function obiba_auth_register_form_user() {
	//override form_id value
	$cpatcha_value = NULL;
	$form_attributes = obiba_auth_get_agate_form_attributes();
	$recaptcha_key = obiba_auth_get_agate_recaptch_key();
	//overloading the $form attributes
	obiba_auth_load_libraires_resources();
	$module_path_ = drupal_get_path('module', 'obiba_auth');
	drupal_add_js($module_path_ . '/js/ang/app.js', array('type' => 'file', 'scope' => 'footer'));
	drupal_add_js(array(
			'form' => $form_attributes['form'],
			'schema' => $form_attributes['schema'],
			'recaptchaKey' => $recaptcha_key
		),
		'setting');
	return theme('obiba_auth_user-register-form');
}

/*
 * Get the join form parameters from Agate server
 * @return : formatted Json parameter form
 *
 * */
function obiba_auth_get_agate_form_attributes() {
	$agate_client = new AgateClient();
	$form = $agate_client->get_config_form_join();
	$form_attributes = array(
		'form' => $form['definition'],
		'schema' => $form['schema']
	);
	return $form_attributes;
}

/*
 * Get the join form parameters from Agate server
 * @return : formatted Json parameter form
 *
 * */
function obiba_auth_get_agate_recaptch_key() {
	$agate_client = new AgateClient();

	return $agate_client->get_recaptcha_key_config_form_join();
}

function obiba_auth_user_pass_validate($form, &$form_state) {
	$name_email = $form_state['values']['name'];
	if ((!isset($form_state['uid']) || $form_state['uid'] == FALSE) && !empty($name_email)) {
		obiba_auth_send_password_request(array('username' => $name_email));
	}
}

function obiba_auth_send_password_request($name_email) {
	$agate_client = new AgateClient();
	$response = $agate_client->password_request($name_email);
	if (!empty($response['code']) && $response['code'] == 200) {
		drupal_set_message(t('Check your email to complete your login recovery.'), 'status');
		return TRUE;
	}
	else {
		if (!empty($response['codeError'])) {
			$message_serv_array = json_decode($response['message']);
			drupal_set_message(t('Password request error, server respond with: ') . $message_serv_array->message, 'error');
		}
		return FALSE;
	}
}

/**
 * Implements hook_form_user_register_form_alter().
 */
function obiba_auth_form_obiba_user_register_form_alter(&$form, &$form_state, $form_id) {
	$form['obiba_auth']['#value'] = 'obiba_auth_user_register_form';
}

/**
 * Implements hook_form_user_pass_alter().
 */
function obiba_auth_form_user_pass_alter(&$form, $form_state) {
	$form['obiba_auth']['#value'] = 'obiba_auth_user_register_form';
	$form['#validate'] = array(
		'obiba_auth_user_pass_validate',
		'user_pass_validate',
	);
}

/**
 * Implementation of hook_form_alter().
 * Change the normal form login form behaviour.
 */
function obiba_auth_form_user_login_alter(&$form, $form_state) {
	unset($form['links']);
	$form['obiba_auth']['#value'] = 'obiba_auth_user_register_form';
	$form['name']['#title'] = t('Username or Email');
	$form['#validate'] = array(
		'obiba_auth_mail_user_login_validate',
		'user_login_name_validate',
		'user_login_authenticate_validate',
		'obiba_auth_login_validate',
		'user_login_final_validate',

	);
}

/**
 * Custom validation for user login form
 *
 */
function obiba_auth_mail_user_login_validate($form, &$form_state) {
	if (isset($form_state['values']['name']) && $form_state['values']['name']) {
		if ($name = db_query("SELECT name FROM {users} WHERE LOWER(mail) = LOWER(:name)", array(
			':name' => $form_state['values']['name'],
		))->fetchField()
		) {
			form_set_value($form['name'], $name, $form_state);
		}
	}
}

/**
 * Implement hook_user_profile_form_alter() to disable the ability to change email address and
 * password for externally authenticated users.
 */
function obiba_auth_form_user_profile_form_alter(&$form, $form_state) {
	$account = $form['#user'];
	$authmaps = user_get_authmaps($account->name);
	if (isset($authmaps['obiba_auth'])) {
		drupal_set_message(t('This account settings (password, email etc.) should be changed on <a href="@agate" target="_blank">Agate</a>.', array('@agate' => variable_get_value('agate_url'))));
		$form['account']['name']['#type'] = 'hidden';
		$form['account']['mail']['#type'] = 'hidden';
		$form['account']['current_pass']['#type'] = 'hidden';
		$form['account']['pass']['#type'] = 'hidden';
	}
	return $form;

}

/**
 * Implements hook_library().
 */
function obiba_auth_library() {
	$libraries = array();
	$lib_path_schema_form = libraries_get_path('angular-schema-form');
	// Make sure we have a valid library path before returning library load info.
	if (!empty($lib_path_schema_form)) {
		$libraries['angular-schema-form'] = array(
			'title' => 'Angular Schema Form',
			'website' => 'http://schemaform.io',
			'version' => 'Last Version',
			'js' => array(

				$lib_path_schema_form . '/angular/angular.min.js' => array('type' => 'file', 'scope' => 'footer'),
				$lib_path_schema_form . '/angular-resource/angular-resource.min.js' => array(
					'type' => 'file',
					'scope' => 'footer'
				),
				$lib_path_schema_form . '/angular-bootstrap/ui-bootstrap-tpls.min.js' => array(
					'type' => 'file',
					'scope' => 'footer'
				),
				$lib_path_schema_form . '/angular-sanitize/angular-sanitize.min.js' => array(
					'type' => 'file',
					'scope' => 'footer'
				),
				$lib_path_schema_form . '/tv4/tv4.js' => array('type' => 'file', 'scope' => 'footer'),
				$lib_path_schema_form . '/objectpath/lib/ObjectPath.js' => array('type' => 'file', 'scope' => 'footer'),
				$lib_path_schema_form . '/angular-schema-form/dist/schema-form.min.js' => array(
					'type' => 'file',
					'scope' => 'footer'
				),
				$lib_path_schema_form . '/angular-schema-form/dist/bootstrap-decorator.min.js' => array(
					'type' => 'file',
					'scope' => 'footer'
				),
				$lib_path_schema_form . '/angular-recaptcha/release/angular-recaptcha.min.js' => array(
					'type' => 'file',
					'scope' => 'footer'
				),
			),
//      'css' => array(
//        $lib_path_schema_form . '/extensions/FixedColumns/css/dataTables.fixedColumns.css' => array()
//      )
		);
	}
	return $libraries;
}

/**
 * Implements hook_library_alter().
 * Angular library compatible with Jquery 1.10
 *
 */
function obiba_auth_library_alter(&$javascript, $module) {
	if ($module = 'obiba_auth' && current_path() == 'obiba_user/register') {
		$path = drupal_get_path('module', 'jquery_update');
		jquery_update_jquery_replace($javascript, NULL, $path, NULL, '1.10');
	}
}

function obiba_auth_load_libraires_resources() {
	if (drupal_get_library('obiba_auth', 'angular-schema-form')) {
		drupal_add_library('obiba_auth', 'angular-schema-form');
	}
	else {
		watchdog('Obiba_auth', 'The library angular-schema-form not loaded', array(), WATCHDOG_WARNING);
	}
}

/**
 * Implements hook_permission().
 */
function obiba_auth_permission() {
	return array(
		'administer obiba' => array(
			'title' => t('Administer OBiBa'),
			'description' => t('Configure OBiBa Auth server and other settings.'),
			'restrict access' => TRUE,
		)
	);
}

/**
 * Implements hook_user_logout().
 */
function obiba_auth_user_logout() {
	if (!AgateClient::hasTicket()) {
		return;
	}
	$agate_client = new AgateClient();
	$agate_client->logout();
}

/**
 * Implementation of hook_form_alter().
 * Change the normal form login block form behaviour.
 */
function obiba_auth_form_user_login_block_alter(&$form, $form_state) {
	return obiba_auth_form_user_login_alter($form, $form_state);
}

function obiba_auth_get_from_attribute($attribute, $user_info) {
	foreach ($user_info['attributes'] as $Value_attribute) {
		if ($attribute == $Value_attribute['key']) {
			return $Value_attribute['value'];
		}
	}
	return FALSE;
}

/*
 * Add the new users in drupal in login or register process
 *
 */
function obiba_auth_save_drupal_new_user() {
	$client = new AgateClient();
	$user_info = $client->getSubject();
	$user_edit = array();
	$username = $user_info['username'];
	$mail = obiba_auth_get_from_attribute('email', $user_info);
	$username = valid_email_address($username) ? '' : $username;
	$db_roles = user_roles();

	$account = user_external_load($username);
	if ($account) {
		$roles = $account->roles;
		foreach ($user_info['groups'] as $group) {
			foreach ($db_roles as $rid => $role) {
				if (strcmp($group, $role) == 0 && !isset($roles[$rid])) {
					$roles[$rid] = $role;
					$user_edit['roles'] = $roles;
				}
			}
		}
	}
	if (!$account) {
		$user_edit = array(
			'name' => $username,
			'mail' => $mail,
			'pass' => user_password(),
			'init' => $username,
			'status' => 1,
			'access' => REQUEST_TIME
		);

		// apply additional role
		$auto_roles = variable_get('obiba_auto_assigned_role', array());
		foreach ($auto_roles as $auto_rid => $value) {
			if ($value != 0) {
				foreach ($db_roles as $rid => $role) {
					if ($auto_rid == $rid && !isset($roles[$rid])) {
						$roles[$rid] = $role;
						$user_edit['roles'] = array_merge($user_edit['roles'], $roles);
					}
				}
			}
		}

		$account = user_save(drupal_anonymous_user(), $user_edit);
		user_set_authmaps($account, array("authname_" . "'obiba_auth'" => $username));
	}
	return $account;
}

/**
 * The obiba_auth_auth() function attempts to authenticate a user off the external system using their e-mail address.
 */
function obiba_auth_login_validate($form, &$form_state) {
	$username = $form_state['values']['name'];
	$password = $form_state['values']['pass'];
	// try to authenticate on Agate if not already authenticated
	if ((!isset($form_state['uid']) || $form_state['uid'] == FALSE) && !empty($username) && !empty($password)) {
		if (obiba_auth_check_user($username, $password)) {
			$account = obiba_auth_save_drupal_new_user($form_state);
			$form_state['uid'] = $account->uid;
		}
	}
	// else drop through to the end and return nothing - Drupal will handle the rejection for us
}

function obiba_auth_check_user($username, $password) {
	try {
		$agate_client = new AgateClient();
		// authenticate
		return $agate_client->authenticate($username, $password);
	}
	catch (Exception $e) {
		watchdog('obiba_auth', 'Error %error_message.', array('%error_message' => $e->faultstring), WATCHDOG_NOTICE);
		return FALSE;
	}
}

/**
 * Merge the roles from Agate to the roles found in drupal and set some attributes.
 * @param $account
 */
function obiba_auth_apply_subject($account) {
	$roles = $account->roles;
	$edit = array();
	$db_roles = user_roles();

	// authorize = apply groups
	$agate_client = new AgateClient();
	$subject = $agate_client->getSubject();
	if (isset($subject['groups'])) {
		// find the role id corresponding to the group name (if any)
		foreach ($subject['groups'] as $group) {
			foreach ($db_roles as $rid => $role) {
				if (strcmp($group, $role) == 0 && !isset($roles[$rid])) {
					$roles[$rid] = $role;
					$edit['roles'] = $roles;
				}
			}
		}
	}

	// set email
	if (isset($subject['attributes'])) {
		foreach ($subject['attributes'] as $key => $map) {
			if ($key == 'email') {
				$edit['mail'] = $map;
			}
		}
	}

	// apply additional role
	$auto_roles = variable_get('obiba_auto_assigned_role', array());
	foreach ($auto_roles as $auto_rid => $value) {
		if ($value != 0) {
			foreach ($db_roles as $rid => $role) {
				if ($auto_rid == $rid && !isset($roles[$rid])) {
					$roles[$rid] = $role;
					$edit['roles'] = $roles;
				}
			}
		}
	}

	if (count($edit) > 0) {
		user_save($account, $edit);
	}
}

/**
 * Implements hook_init().
 *
 * Traps a page load to see if authentication is required.
 */
function obiba_auth_init() {
	global $user;

	// not authenticated but has a Agate token
	if (!user_is_logged_in() && isset($_COOKIE['obibaid'])) {
		$agate_client = new AgateClient();
		$username = $agate_client->validate($_COOKIE['obibaid']);
		if (!is_null($username)) {
			user_external_login_register($username, 'obiba_auth');
			$account = user_external_load($username);
			obiba_auth_apply_subject($account);
		}
	}
}
